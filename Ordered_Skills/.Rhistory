setwd("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_Skills")
library(rstan)
library(coda)
# Load the properly prepared data ("Data_ordered_skills").
load("datalist_ordered")
head(dataList)
#Numerize the factors in terms of your convenience
dataList<-list(Y=dataList$Y,X=dataList$X,n_teams=12,
N=dataList$N,K=ncol(dataList$X),ncat=6)
Full_ordered_skills<-stan(file.choose(),iter=4000, warmup=2000,chains=1,thin=2,
data=dataList,control=list(max_treedepth=15),cores=1)
betas_summary<-summary(Full_ordered_skills,pars = c("beta"))$summary
intercept_summary<-summary(Full_ordered_skills, pars = c("temp_Intercept"))$summary
post_mean_betas<-betas_summary[1:dataList$K,1]
post_sd_betas<-betas_summary[1:dataList$K,3]
gammas<-rep(1,dataList$K)# All the candidate variables included in the model
temp_Intercept<-intercept_summary[,1]
betas<-post_mean_betas
# Prepare the vectors with the posterior samples of dimension Txp (p=K during algorithm iterations) for all gammas and betas coefficients , respectively.
gammas_matrix<-betas_matrix<-NULL
# Step 3: Data input needed for running the model through RStan.
data_varsel<-list(Y=dataList$Y,X=dataList$X,
N=dataList$N,K=dataList$K,
ncat=6,gammas=gammas,post_mean_betas=post_mean_betas,
post_sd_betas=post_sd_betas)
# Step 4:Run the model through RStan for one sampling iteration (20 warm up and 21 total iterations, 21-20=1 sampling iteration) in order to update the betas from the full conditional posterior distributions.
# Use the previous iteration's parameter values as initial parameter values so MCMC Algorithm can begin.
ord_volley_skills_all<-stan("Ordered_BVS_Skills.stan",
data=data_varsel,chains=1,
iter=21,warmup=20,init=list(list(betas=betas,temp_Intercept=temp_Intercept)),
control=list(adapt_window=15,adapt_init_buffer=3,adapt_term_buffer=2))
# Initialize the log-likelihood for both cases 0 and 1 for gammas indicators/coefficients.
log_point_zero<-matrix(NA,nrow=data_varsel$N,ncol=data_varsel$K) # matrix with log likelihoods when gamma[j]=0
log_point_one<-matrix(NA,nrow=data_varsel$N,ncol=data_varsel$K)  #  matrix with log likelihoods when gamma[j]=1
# Extract both model's parameters and log-likelihoods for both cases of gammas indicators.
par<-extract(ord_volley_skills_all)
temp_Intercept<-par$temp_Intercept[1,]
betas<-par$betas[1,]
log_point_zero<-par$log_lik_zero[1,,]
log_point_one<-par$log_lik_one[1,,]
# Prepare the vector of gammas for all candidate variables.
gammas<-NULL
# Step 5
for (j in 1:data_varsel$K){# K candidate variables
log_O_j<-O_j<-NULL
# Step 6: Calculation of the logarithm (more convenient) of O_j quantity needed in order to update the gamma indicators.
log_O_j<-sum(log_point_one[,j])-sum(log_point_zero[,j])+
dnorm(betas[j],0,sqrt(data_varsel$N)*(post_sd_betas[j]),log=T)-
dnorm(betas[j],post_mean_betas[j],post_sd_betas[j],log=T)
# We specify an upper bound in order to avoid Nan potential problems due to overflow.
log_O_j[log_O_j>700]<-700
O_j<-exp(log_O_j)
gammas<-c(gammas,rbinom(1,1,O_j/(1+O_j)))
}
# Step 7: In each one of T iterations, store the values of both posterior gammas and betas coefficients in the Txp matrices
gammas_matrix<-c(gammas_matrix,gammas)
betas_matrix<-c(betas_matrix,betas)
gammas
# Step 4:Run the model through RStan for one sampling iteration (20 warm up and 21 total iterations, 21-20=1 sampling iteration) in order to update the betas from the full conditional posterior distributions.
# Use the previous iteration's parameter values as initial parameter values so MCMC Algorithm can begin.
ord_volley_skills_all<-stan("Ordered_BVS_Skills.stan",
data=data_varsel,chains=1,
iter=21,warmup=20,init=list(list(betas=betas,temp_Intercept=temp_Intercept)),
control=list(adapt_window=15,adapt_init_buffer=3,adapt_term_buffer=2))
# Initialize the log-likelihood for both cases 0 and 1 for gammas indicators/coefficients.
log_point_zero<-matrix(NA,nrow=data_varsel$N,ncol=data_varsel$K) # matrix with log likelihoods when gamma[j]=0
log_point_one<-matrix(NA,nrow=data_varsel$N,ncol=data_varsel$K)  #  matrix with log likelihoods when gamma[j]=1
# Extract both model's parameters and log-likelihoods for both cases of gammas indicators.
par<-extract(ord_volley_skills_all)
temp_Intercept<-par$temp_Intercept[1,]
betas<-par$betas[1,]
log_point_zero<-par$log_lik_zero[1,,]
log_point_one<-par$log_lik_one[1,,]
# Prepare the vector of gammas for all candidate variables.
gammas<-NULL
# Step 5
for (j in 1:data_varsel$K){# K candidate variables
log_O_j<-O_j<-NULL
# Step 6: Calculation of the logarithm (more convenient) of O_j quantity needed in order to update the gamma indicators.
log_O_j<-sum(log_point_one[,j])-sum(log_point_zero[,j])+
dnorm(betas[j],0,sqrt(data_varsel$N)*(post_sd_betas[j]),log=T)-
dnorm(betas[j],post_mean_betas[j],post_sd_betas[j],log=T)
# We specify an upper bound in order to avoid Nan potential problems due to overflow.
log_O_j[log_O_j>700]<-700
O_j<-exp(log_O_j)
gammas<-c(gammas,rbinom(1,1,O_j/(1+O_j)))
}
gammas
par
par$gb
print(ord_volley_skills_all, pars=c("beta"))
print(ord_volley_skills_all, pars=c("betas"))
ord_volley_skills_all<-stan("Ordered_BVS_Skills.stan",
data=data_varsel,chains=1,
iter=121,warmup=20,init=list(list(betas=betas,temp_Intercept=temp_Intercept)),
control=list(adapt_window=15,adapt_init_buffer=3,adapt_term_buffer=2))
print(ord_volley_skills_all, pars=c("betas"))
setwd("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_Skills")
# Load the properly prepared data ("Data_ordered_skills").
load("datalist_ordered")
head(dataList)
#Numerize the factors in terms of your convenience
dataList<-list(Y=dataList$Y,X=dataList$X,n_teams=12,
N=dataList$N,K=ncol(dataList$X),ncat=6)
dataList$K
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Full_ordered_team_abilities_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Full_ordered_team_abilities_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Ordered_BVS_Skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Ordered_BVS_Skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Ordered_BVS_TA_Skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Ordered_BVS_TA_Skills.stan")
setwd("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_Skills")
library(rstan)
library(coda)
# Choose the working directory of this file (...\\Submitted_Appendix\\Ordered\\)
setwd(getwd())
# Load the properly prepared data ("Data_ordered_skills").
load("datalist_ordered")
head(dataList)
#Numerize the factors in terms of your convenience
dataList<-list(Y=dataList$Y,X=dataList$X,n_teams=12,
N=dataList$N,K=ncol(dataList$X),ncat=6)
## Run Full_ordered_skills.stan
Full_ordered_skills<-stan(file.choose(),iter=12000, warmup=2000,chains=4,thin=2,
data=dataList,control=list(max_treedepth=15),cores=4)
rstan:::rstudio_stanc("Full_ordered_skills.stan")
## Run Full_ordered_skills.stan
Full_ordered_skills<-stan(file.choose(),iter=12000, warmup=2000,chains=4,thin=2,
data=dataList,control=list(max_treedepth=15),cores=4)
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
Full_ordered_skills<-stan(file.choose(),iter=12000, warmup=2000,chains=4,thin=2,
data=dataList,control=list(max_treedepth=15),cores=4)
rstan:::rstudio_stanc("Full_ordered_skills.stan")
Full_ordered_skills<-stan(file.choose(),iter=12000, warmup=2000,chains=4,thin=2,
data=dataList,control=list(max_treedepth=15),cores=4)
rstan:::rstudio_stanc("Ordered_BVS_Skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Full_ordered_team_abilities_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Full_ordered_team_abilities_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Ordered_BVS_TA_Skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Ordered_BVS_TA_Skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Ordered_BVS_TA_Skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Full_ordered_team_abilities_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Full_ordered_team_abilities_skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Full_ordered_team_abilities_skills.stan")
rstan:::rstudio_stanc("Full_ordered_skills.stan")
rstan:::rstudio_stanc("Ordered_BVS_Skills.stan")
rstan:::rstudio_stanc("~/GitHub/Bayesian_Variable_Selection_Volleyball/Ordered_TA_Skills/Ordered_BVS_TA_Skills.stan")
